<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <ReleaseNumber Condition="'$(ReleaseNumber)' == ''">2.0.0</ReleaseNumber>
        <BuildNumber Condition="'$(BUILD_NUMBER)' != ''">$(BUILD_NUMBER)</BuildNumber>
        <BuildNumber Condition="'$(BUILD_NUMBER)' == ''">0</BuildNumber>

        <ArtifactsRoot>$(MSBuildProjectDirectory)/built</ArtifactsRoot>
		<LibDir>$(ArtifactsRoot)/lib</LibDir>
		<DebugAdapterDir>$(ArtifactsRoot)\vscode\</DebugAdapterDir>
        <Configuration>Release</Configuration>
		<Solution>$(MSBuildProjectDirectory)/src/1Script.sln</Solution>
		
    </PropertyGroup>
    
    <ItemGroup>
        <PlatformItem Include="x86">
            <MSBuildName>x86</MSBuildName>
        </PlatformItem>
        <PlatformItem Include="x64">
            <MSBuildName>&quot;Any CPU&quot;</MSBuildName>
        </PlatformItem>
    </ItemGroup>
	
	<ItemGroup>
		<PublishProjects Include="oscript">
			<ProjectFile>oscript.csproj</ProjectFile>
			<Framework>net5.0</Framework>
		</PublishProjects>
		<PublishProjects Include="TestApp">
			<ProjectFile>TestApp.csproj</ProjectFile>
			<Framework>net5.0-windows</Framework>
		</PublishProjects>
	</ItemGroup>
	
	<Target Name="CleanAll">
    
        <ItemGroup>
            <TestsResults Include="$(MSBuildProjectDirectory)/tests/*.os.xml" />
        </ItemGroup>
    
        <Delete Files="@(TestsResults)" />
        <RemoveDir Directories="$(ArtifactsRoot)" Condition="Exists($(ArtifactsRoot))" />

		<MSBuild Projects="$(Solution)" Targets="Clean"/>

    </Target> 
	
	<Target Name="MakeFDD">
		
		<CreateItem
			Include="@(PublishProjects)"
			AdditionalMetadata="Platform=%(PlatformItem.MSBuildName);Suffix=%(PlatformItem.Identity)">
			<Output
				TaskParameter="Include"
				ItemName="BuildVariant"/>
		</CreateItem>
		
		<Exec Command="dotnet publish &quot;src/%(BuildVariant.Identity)/%(BuildVariant.ProjectFile)&quot; -f %(BuildVariant.Framework) -c $(Configuration) -p:Platform=%(BuildVariant.Platform) -p:UseAppHost=false -o &quot;$(ArtifactsRoot)/fdd-%(BuildVariant.Suffix)/bin&quot;"/>
	</Target>
	
	<Target Name="MakeSCD">
		
		<ItemGroup>
			<RuntimeID Include="win-x64"/>
			<RuntimeID Include="win-x86"/>
			<RuntimeID Include="linux-x64"/>
		</ItemGroup>
		
		<Exec Command="dotnet publish &quot;src/oscript/oscript.csproj&quot; -r %(RuntimeID.Identity) -c $(Configuration) -o &quot;$(ArtifactsRoot)/%(RuntimeID.Identity)/bin&quot;"/>
	</Target>
    
	<Target Name="BuildDebugger">
		<PropertyGroup>
			<DebuggerProject>src/VSCode.DebugAdapter/VSCode.DebugAdapter.csproj</DebuggerProject>
			<LocalResolvedOutput>$(DebugAdapterDir)</LocalResolvedOutput>
		</PropertyGroup>
		
		<MSBuild Projects="$(DebuggerProject)" Properties="OutputPath=$(LocalResolvedOutput);Configuration=Release"/>
		
	</Target>
	
	<Target Name="BuildAll" DependsOnTargets="CleanAll;MakeFDD;MakeSCD;BuildDebugger">
		<CallTarget Targets="CleanIntermediates"/>
	</Target>

	<!-- Используется для поиска первого собранного oscript.exe -->
	<UsingTask
			TaskName="GetFirstItem"
			TaskFactory="CodeTaskFactory"
			AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
		<ParameterGroup>
			<Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
			<FirstItem ParameterType="System.String" Output="true" Required="false" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.Xml"/>
			<Using Namespace="System.Linq"/>
			<Code Type="Fragment" Language="cs">FirstItem = Items.First().ItemSpec;</Code>
		</Task>
	</UsingTask>
	
	<Target Name="GatherLibrary">
		<MakeDir Directories="$(LibDir)" />
		
		<ItemGroup>
			<Executable Include="$(ArtifactsRoot)/*x64/bin/oscript.dll"/>
		</ItemGroup>

		<!-- упадет если ничего не нашлось, и это хорошо -->
		<GetFirstItem Items="@(Executable)">
			<Output TaskParameter="FirstItem" PropertyName="Runner"/>
		</GetFirstItem>
		
		<Exec Command="dotnet &quot;$(Runner)&quot; &quot;$(MSBuildProjectDirectory)/install/unicode-zipper.os&quot; unpack &quot;$(MSBuildProjectDirectory)/install/opm-0.16.2.ospx&quot; &quot;$(LibDir)/tmp&quot;"/>
		<Exec Command="dotnet &quot;$(Runner)&quot; &quot;$(MSBuildProjectDirectory)/install/unicode-zipper.os&quot; unpack &quot;$(LibDir)/tmp/content.zip&quot; &quot;$(LibDir)/opm&quot;"/>

		<Copy SourceFiles="$(MSBuildProjectDirectory)\install\package-loader.os" DestinationFolder="$(LibDir)"/>
		<Copy SourceFiles="$(MSBuildProjectDirectory)\install\opm.bat" DestinationFolder="%(Executable.RelativeDir)"/>
		<RemoveDir Directories="$(LibDir)/tmp"/>
	</Target>
	
	<Target Name="ComposeDistributionFolders">
		<ItemGroup>
			<LibraryFiles Include="$(LibDir)/**/*" Exclude="package-loader.os"/>
		</ItemGroup>
		
		<!--Заставить Copy копировать batching-ом в несколько директорий - не удалось :(-->
		<Copy SourceFiles="@(LibraryFiles)" DestinationFolder="$(ArtifactsRoot)/fdd-x64/lib/%(RecursiveDir)" />
		<Copy SourceFiles="@(LibraryFiles)" DestinationFolder="$(ArtifactsRoot)/fdd-x86/lib/%(RecursiveDir)" />
		<Copy SourceFiles="@(LibraryFiles)" DestinationFolder="$(ArtifactsRoot)/win-x64/lib/%(RecursiveDir)" />
		<Copy SourceFiles="@(LibraryFiles)" DestinationFolder="$(ArtifactsRoot)/win-x86/lib/%(RecursiveDir)" />
		<Copy SourceFiles="@(LibraryFiles)" DestinationFolder="$(ArtifactsRoot)/linux-x64/lib/%(RecursiveDir)" />
		
		<RemoveDir Directories="$(LibDir)" />
		
	</Target>
	
	<Target Name="CleanIntermediates">
		<ItemGroup>
			<TempFiles Include="$(ArtifactsRoot)/**/bin/*.pdb"/>
			<TempFiles Include="$(ArtifactsRoot)/**/bin/*.xml"/>
			<TempFiles Include="$(DebugAdapterDir)/**/*.pdb"/>
		</ItemGroup>
		<Delete Files="@(TempFiles)"/>
	</Target>
	
	<Target Name="PrepareDistributionFiles" DependsOnTargets="CleanAll;BuildAll;GatherLibrary;ComposeDistributionFolders"/>
	
	<Target Name="Test">
		<ItemGroup>
			<Executable Include="$(ArtifactsRoot)/*x64/bin/oscript.dll" />
			<RemoveXMLTestResult Include="$(MSBuildProjectDirectory)\tests\*.os.xml" />
		</ItemGroup>

		<Delete Files="@(RemoveXMLTestResult)" />
		
		<GetFirstItem Items="@(Executable)">
			<Output TaskParameter="FirstItem" PropertyName="Runner"/>
		</GetFirstItem>

		<Exec WorkingDirectory="$(MSBuildProjectDirectory)\tests" Command="dotnet &quot;$(Runner)&quot; &quot;$(MSBuildProjectDirectory)\tests\testrunner.os&quot; -runall . xddReportPath ." IgnoreExitCode="true"/>
		
	</Target>
	
	<Target Name="PackDistributions">
		<ItemGroup>
			<Executable Include="$(ArtifactsRoot)/*x64/bin/oscript.dll" />
			<RuntimeID Include="fdd-x64"/>
			<RuntimeID Include="fdd-x86"/>
			<RuntimeID Include="win-x64"/>
			<RuntimeID Include="win-x86"/>
			<RuntimeID Include="linux-x64"/>
		</ItemGroup>

		<CreateItem
				Include="@(RuntimeID)"
				AdditionalMetadata="Path=$(ArtifactsRoot)/%(RuntimeID.Identity)">
			<Output
					TaskParameter="Include"
					ItemName="BuildVariant"/>
		</CreateItem>
		
		<!-- упадет если ничего не нашлось, и это хорошо -->
		<GetFirstItem Items="@(Executable)">
			<Output TaskParameter="FirstItem" PropertyName="Runner"/>
		</GetFirstItem>
		
		<Exec Command="dotnet &quot;$(Runner)&quot; &quot;$(MSBuildProjectDirectory)\install\unicode-zipper.os&quot; pack &quot;$(ArtifactsRoot)/%(RuntimeID.Identity)/*&quot; &quot;$(ArtifactsRoot)/OneScript-$(ReleaseNumber)-%(RuntimeID.Identity).zip&quot;"/>
		<RemoveDir Directories="$(ArtifactsRoot)/%(RuntimeID.Identity)" />
	</Target>
	
</Project>
